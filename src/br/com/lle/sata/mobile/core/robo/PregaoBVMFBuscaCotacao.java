package br.com.lle.sata.mobile.core.robo;

import static br.com.lle.sata.util.LogUtil.log;

import java.util.Hashtable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import br.com.lle.sata.mobile.core.interfaces.IBuscaCotacao;
import br.com.lle.sata.util.http.HTTPSata;

public class PregaoBVMFBuscaCotacao implements IBuscaCotacao {

	private String URL_COTACAO = "http://pregao-online.bmfbovespa.com.br/Cotacoes.aspx?idioma=pt-BR";
	
	@Override
	public String getCotacao(String codigo) {
		Hashtable<String, String> h = new Hashtable<String, String>();
		//h.put("ctl00$DefaultContent$TxtCodigoAtivo", "Digite o nome da empresa ou código do ativo");
		h.put("__VIEWSTATE", "");
		h.put("__CALLBACKID", "__Page");
		h.put("__EVENTVALIDATION", "/wEWAwLX+8jkBwL8upTfBwK/0df8B0Je7GWpZutlTY1brMvW2GOhBcNf");
		h.put("__CALLBACKPARAM", "|Busca|" + codigo);
		String html = HTTPSata.POST(URL_COTACAO, h);
		return getValor(html);
	}
	
	private String getValor(String html) {
		Pattern p = Pattern.compile("ado\">\\d");
		Matcher m = p.matcher(html);
		m.find();
		int fimTdIndex = html.indexOf("</td>", m.start());
		return html.substring(m.start() + "ado\">".length(), fimTdIndex);
	}
	
	public static void main(String[] args) {
		PregaoBVMFBuscaCotacao bc = new PregaoBVMFBuscaCotacao();
		String cotacao = bc.getCotacao("PETR4");
		log(cotacao);
	}
	
}
